module(name = "haskell-monorepo", version = "0.1")

# Haskell
bazel_dep(name = "rules_haskell", version = "1.0")
bazel_dep(name = "rules_cc", version = "0.0.17")

haskell_toolchains = use_extension(
    "@rules_haskell//extensions:haskell_toolchains.bzl",
    "haskell_toolchains",
)

haskell_toolchains.bindists(version = "9.8.1")

non_module_deps = use_extension(
    "//:non_module_deps.bzl",
    "non_module_deps",
)

use_repo(
    non_module_deps,
    "zlib.hs",
    "Cabal",
)

stack = use_extension(
    "@rules_haskell//extensions:stack_snapshot.bzl",
    "stack_snapshot",
)

use_repo(
    stack,
    "stackage",
    "stackage-exe",
    "stackage-unpinned",
)

stack.stack_snapshot_json(label = "//:stackage_snapshot.json")

# LTS snapshot published for ghc-9.4.6 (default version used by rules_haskell)
stack.snapshot(name = "lts-23.22")

# Package definitions for stack extension
SIMPLE_PACKAGES = [
    "aeson",
    "aivika-6.1.1",
    "random",
    "mtl",
    "transformers",
    "bytestring",
    "vector",
    "template-haskell",
    "text",
    "network-uri",
    "wai",
    "warp",
    "http-types",
    "HUnit",
    "scalpel",
    "scalpel-core",
    "webdriver",
    "aeson-pretty-0.8.10",
    "optparse-applicative",
    "QuickCheck",
]

# Simple packages with no special configuration
[stack.package(name = pkg) for pkg in SIMPLE_PACKAGES]

# Packages with setup dependencies
stack.package(
    name = "containers",
    setup_deps = ["@Cabal//:Cabal"],
)

stack.package(
    name = "stm",
    setup_deps = ["@Cabal//:Cabal"],
)

# Packages with extra dependencies
stack.package(
    name = "zlib",
    extra_deps = ["@zlib.hs"],
    flags = [
        "-non-blocking-ffi",
        "-pkg-config",
    ],
)

stack.package(
    name = "streaming-commons",
    extra_deps = ["@zlib.hs"],
)

stack.package(
    name = "digest",
    extra_deps = ["@zlib.hs"],
    flags = [
        "-pkg-config",
    ],
)

# Packages with complex configurations
stack.package(
    name = "attoparsec",
    components = [
        # attoparsec contains an internal library which is not exposed publicly,
        # but required to build the public library, hence the declaration of
        # those 2 components, as well as the explicit declaration of the
        # dependency between them.
        "lib",
        "lib:attoparsec-internal",
    ],
    components_dependencies = {
        "lib:attoparsec": ["lib:attoparsec-internal"],
    },
)

# Versioned packages
stack.package(name = "data-default-0.8.0.0")
stack.package(name = "tls-2.1.2")

# Commented out packages for future reference
# stack.package(name = "http-client")
# stack.package(name = "http-client-tls")
# stack.package(name = "tagsoup")
# stack.package(name = "case-insensitive")
# stack.package(name = "tls")

# This uses an unpinned version of stack_snapshot, meaning that stack is invoked on every build.
# To switch to pinned stackage dependencies, run `bazel run @stackage-unpinned//:pin` and
# uncomment the following line.
#stack.stack_snapshot_json(label = "//:stackage_snapshot.json")

# Node
bazel_dep(name = "aspect_rules_js", version = "2.3.8")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.0")
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "16.14.2")
#################################

# npm workspace for mcp-shrimp-task-manager
mcp_shrimp_task_manager = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

mcp_shrimp_task_manager.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//tools/mcp-shrimp-task-manager:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(mcp_shrimp_task_manager, "npm")

# npm workspace for tic-tac-toe-electron
tic_tac_toe_electron = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

tic_tac_toe_electron.npm_translate_lock(
    name = "npm_tic_tac_toe",
    pnpm_lock = "//electron-app/tic-tac-toe:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(tic_tac_toe_electron, "npm_tic_tac_toe")

# npm workspace for electron-hello-world
electron_hello_world = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

electron_hello_world.npm_translate_lock(
    name = "npm_electron_hello_world",
    pnpm_lock = "//electron-app/hello-world:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(electron_hello_world, "npm_electron_hello_world")

# npm workspace for electron-babylon-example
# NOTE: If you add many Electron apps, consider refactoring this pattern with a macro to reduce boilerplate.
electron_babylon_example = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

electron_babylon_example.npm_translate_lock(
    name = "npm_electron_babylon_example",
    pnpm_lock = "//electron-app/babylon-example:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(electron_babylon_example, "npm_electron_babylon_example")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

################################################################################
# rules_ts
################################################################################
bazel_dep(name = "aspect_rules_swc", version = "2.4.3")
bazel_dep(name = "aspect_rules_ts",  version = "3.6.0")
bazel_dep(name = "aspect_rules_esbuild", version = "0.22.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)

rules_ts_ext.deps()

use_repo(rules_ts_ext, "npm_typescript")

