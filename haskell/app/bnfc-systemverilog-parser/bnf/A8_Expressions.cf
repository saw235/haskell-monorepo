-- A.8 Expressions - SystemVerilog Expression Grammar
-- Based on IEEE 1800 SystemVerilog Standard Annex A.8

-- A.8.1 Concatenations
ConcatenationExpr.           Concatenation ::= "{" [Expression] "}" ;
ConstConcatenationExpr.      ConstantConcatenation ::= "{" [ConstantExpression] "}" ;
ConstMultipleConcatenationExpr. ConstantMultipleConcatenation ::= "{" ConstantExpression ConstantConcatenation "}" ;
ModulePathConcatenationExpr. ModulePathConcatenation ::= "{" [ModulePathExpression] "}" ;
ModulePathMultipleConcatenationExpr. ModulePathMultipleConcatenation ::= "{" ConstantExpression ModulePathConcatenation "}" ;
MultipleConcatenationExpr.   MultipleConcatenation ::= "{" Expression Concatenation "}" ;
StreamingConcatenationExpr.  StreamingConcatenation ::= "{" StreamOperator [SliceSize] StreamConcatenation "}" ;
EmptyUnpackedArrayConcatenationExpr. EmptyUnpackedArrayConcatenation ::= "{" "}" ;

-- Stream operators
StreamOpRight.        StreamOperator ::= ">>" ;
StreamOpLeft.         StreamOperator ::= "<<" ;

-- Slice size
SliceSizeType.        SliceSize ::= SimpleType ;
SliceSizeExpr.        SliceSize ::= ConstantExpression ;

-- Stream concatenation
StreamConcatenationList. StreamConcatenation ::= "{" [StreamExpression] "}" ;
StreamExprSimple.     StreamExpression ::= Expression ;
StreamExprWith.       StreamExpression ::= Expression "with" "[" ArrayRangeExpression "]" ;

-- Array range expressions
ArrayRangeExprSimple. ArrayRangeExpression ::= Expression ;
ArrayRangeExprRange.  ArrayRangeExpression ::= Expression ":" Expression ;
ArrayRangeExprPlus.   ArrayRangeExpression ::= Expression "+:" Expression ;
ArrayRangeExprMinus.  ArrayRangeExpression ::= Expression "-:" Expression ;

-- A.8.2 Subroutine calls
ConstantFunctionCallExpr. ConstantFunctionCall ::= FunctionSubroutineCall ;
TfCallSimple.         TfCall ::= PsOrHierarchicalTfIdentifier [AttributeInstance] ;
TfCallArgs.           TfCall ::= PsOrHierarchicalTfIdentifier [AttributeInstance] "(" ListOfArguments ")" ;

SystemTfCallSimple.   SystemTfCall ::= SystemTfIdentifier ;
SystemTfCallArgs.     SystemTfCall ::= SystemTfIdentifier "(" ListOfArguments ")" ;
SystemTfCallType.     SystemTfCall ::= SystemTfIdentifier "(" DataType ")" ;
SystemTfCallTypeExpr. SystemTfCall ::= SystemTfIdentifier "(" DataType "," Expression ")" ;
SystemTfCallClocking. SystemTfCall ::= SystemTfIdentifier "(" Expression "," Expression "," ClockingEvent ")" ;

SubroutineCallTf.     SubroutineCall ::= TfCall ;
SubroutineCallSys.    SubroutineCall ::= SystemTfCall ;
SubroutineCallMethod. SubroutineCall ::= MethodCall ;
SubroutineCallRand.   SubroutineCall ::= RandomizeCall ;
SubroutineCallStd.    SubroutineCall ::= "std" "::" RandomizeCall ;

FunctionSubroutineCallSub. FunctionSubroutineCall ::= SubroutineCall ;

-- List of arguments
ListOfArgumentsPositional. ListOfArguments ::= [Expression] [NamedArgument] ;
ListOfArgumentsNamed.     ListOfArguments ::= [NamedArgument] ;
NamedArgumentExpr.        NamedArgument ::= "." Identifier "(" [Expression] ")" ;

-- Method calls
MethodCallBasic.      MethodCall ::= MethodCallRoot "." MethodCallBody ;
MethodCallRootPrimary. MethodCallRoot ::= Primary ;
MethodCallRootImplicit. MethodCallRoot ::= ImplicitClassHandle ;

MethodBodyId.         MethodCallBody ::= MethodIdentifier [AttributeInstance] ;
MethodBodyArgs.       MethodCallBody ::= MethodIdentifier [AttributeInstance] "(" ListOfArguments ")" ;
MethodBodyBuiltin.    MethodCallBody ::= BuiltInMethodCall ;

-- Built-in method calls
BuiltinArray.         BuiltInMethodCall ::= ArrayManipulationCall ;
BuiltinRand.          BuiltInMethodCall ::= RandomizeCall ;

-- Array manipulation calls
ArrayMethodCallSimple. ArrayManipulationCall ::= ArrayMethodName [AttributeInstance] ;
ArrayMethodCallArgs.  ArrayManipulationCall ::= ArrayMethodName [AttributeInstance] "(" ListOfArguments ")" ;
ArrayMethodCallWith.  ArrayManipulationCall ::= ArrayMethodName [AttributeInstance] "(" ListOfArguments ")" "with" "(" Expression ")" ;

-- Array method names
ArrayMethodNameId.    ArrayMethodName ::= MethodIdentifier ;
ArrayMethodNameUnique. ArrayMethodName ::= "unique" ;
ArrayMethodNameAnd.   ArrayMethodName ::= "and" ;
ArrayMethodNameOr.    ArrayMethodName ::= "or" ;
ArrayMethodNameXor.   ArrayMethodName ::= "xor" ;

-- Randomize call
RandomizeCallSimple.  RandomizeCall ::= "randomize" [AttributeInstance] ;
RandomizeCallVars.    RandomizeCall ::= "randomize" [AttributeInstance] "(" VariableIdentifierList ")" ;
RandomizeCallNull.    RandomizeCall ::= "randomize" [AttributeInstance] "(" "null" ")" ;
RandomizeCallWith.    RandomizeCall ::= "randomize" [AttributeInstance] "with" ConstraintBlock ;
RandomizeCallVarsWith. RandomizeCall ::= "randomize" [AttributeInstance] "(" VariableIdentifierList ")" "with" ConstraintBlock ;

-- A.8.3 Expressions

-- Inc/dec expressions
IncOrDecExprPre.      IncOrDecExpression ::= IncOrDecOperator [AttributeInstance] VariableLvalue ;
IncOrDecExprPost.     IncOrDecExpression ::= VariableLvalue [AttributeInstance] IncOrDecOperator ;

-- Conditional expression (ternary operator) - lowest precedence
ConditionalExpr.      Expression ::= CondPredicate "?" [AttributeInstance] Expression ":" Expression ;
ExpSimple.            Expression ::= Expression1 ;

-- Logical OR
LogicalOr.            Expression1 ::= Expression1 "||" Expression2 ;
Exp1Simple.           Expression1 ::= Expression2 ;

-- Logical AND  
LogicalAnd.           Expression2 ::= Expression2 "&&" Expression3 ;
Exp2Simple.           Expression2 ::= Expression3 ;

-- Bitwise OR
BitwiseOr.            Expression3 ::= Expression3 "|" Expression4 ;
Exp3Simple.           Expression3 ::= Expression4 ;

-- Bitwise XOR
BitwiseXor.           Expression4 ::= Expression4 "^" Expression5 ;
BitwiseXnor.          Expression4 ::= Expression4 "~^" Expression5 ;
BitwiseXnor2.         Expression4 ::= Expression4 "^~" Expression5 ;
Exp4Simple.           Expression4 ::= Expression5 ;

-- Bitwise AND
BitwiseAnd.           Expression5 ::= Expression5 "&" Expression6 ;
Exp5Simple.           Expression5 ::= Expression6 ;

-- Equality operators
Equal.                Expression6 ::= Expression6 "==" Expression7 ;
NotEqual.             Expression6 ::= Expression6 "!=" Expression7 ;
CaseEqual.            Expression6 ::= Expression6 "===" Expression7 ;
CaseNotEqual.         Expression6 ::= Expression6 "!==" Expression7 ;
WildEqual.            Expression6 ::= Expression6 "==?" Expression7 ;
WildNotEqual.         Expression6 ::= Expression6 "!=?" Expression7 ;
Exp6Simple.           Expression6 ::= Expression7 ;

-- Relational operators
LessThan.             Expression7 ::= Expression7 "<" Expression8 ;
LessEqual.            Expression7 ::= Expression7 "<=" Expression8 ;
GreaterThan.          Expression7 ::= Expression7 ">" Expression8 ;
GreaterEqual.         Expression7 ::= Expression7 ">=" Expression8 ;
Exp7Simple.           Expression7 ::= Expression8 ;

-- Shift operators
ShiftLeft.            Expression8 ::= Expression8 "<<" Expression9 ;
ShiftRight.           Expression8 ::= Expression8 ">>" Expression9 ;
ArithShiftLeft.       Expression8 ::= Expression8 "<<<" Expression9 ;
ArithShiftRight.      Expression8 ::= Expression8 ">>>" Expression9 ;
Exp8Simple.           Expression8 ::= Expression9 ;

-- Addition and subtraction
Addition.             Expression9 ::= Expression9 "+" Expression10 ;
Subtraction.          Expression9 ::= Expression9 "-" Expression10 ;
Exp9Simple.           Expression9 ::= Expression10 ;

-- Multiplication, division, modulo
Multiplication.       Expression10 ::= Expression10 "*" Expression11 ;
Division.             Expression10 ::= Expression10 "/" Expression11 ;
Modulo.               Expression10 ::= Expression10 "%" Expression11 ;
Exp10Simple.          Expression10 ::= Expression11 ;

-- Power operator (right associative)
Power.                Expression11 ::= Expression12 "**" Expression11 ;
Exp11Simple.          Expression11 ::= Expression12 ;

-- Unary operators
UnaryPlus.            Expression12 ::= "+" [AttributeInstance] Expression12 ;
UnaryMinus.           Expression12 ::= "-" [AttributeInstance] Expression12 ;
UnaryNot.             Expression12 ::= "!" [AttributeInstance] Expression12 ;
UnaryBitNot.          Expression12 ::= "~" [AttributeInstance] Expression12 ;
UnaryAnd.             Expression12 ::= "&" [AttributeInstance] Expression12 ;
UnaryNand.            Expression12 ::= "~&" [AttributeInstance] Expression12 ;
UnaryOr.              Expression12 ::= "|" [AttributeInstance] Expression12 ;
UnaryNor.             Expression12 ::= "~|" [AttributeInstance] Expression12 ;
UnaryXor.             Expression12 ::= "^" [AttributeInstance] Expression12 ;
UnaryXnor.            Expression12 ::= "~^" [AttributeInstance] Expression12 ;
UnaryXnor2.           Expression12 ::= "^~" [AttributeInstance] Expression12 ;
Exp12Simple.          Expression12 ::= Expression13 ;

-- Primary expressions
PrimaryExpr.          Expression13 ::= Primary ;
IncOrDecExpr.         Expression13 ::= IncOrDecExpression ;
ParenOperatorAssign.  Expression13 ::= "(" OperatorAssignment ")" ;
ExpressionInside.     Expression13 ::= Expression "inside" "{" OpenRangeList "}" ;
TaggedUnionExpr.      Expression13 ::= "tagged" MemberIdentifier [Expression] ;

-- A.8.4 Primaries
PrimaryLiteral.       Primary ::= PrimaryLiteral ;
PrimaryHier.          Primary ::= [ClassQualifier] [PackageScope] HierarchicalIdentifier Select ;
PrimaryEmpty.         Primary ::= EmptyUnpackedArrayConcatenation ;
PrimaryConcatenation. Primary ::= Concatenation [RangeExpression] ;
PrimaryMultiple.      Primary ::= MultipleConcatenation [RangeExpression] ;
PrimaryFunction.      Primary ::= FunctionSubroutineCall ;
PrimaryLet.           Primary ::= LetExpression ;
PrimaryParen.         Primary ::= "(" MintypmaxExpression ")" ;
PrimaryCast.          Primary ::= Cast ;
PrimaryAssignment.    Primary ::= AssignmentPatternExpression ;
PrimaryStreaming.     Primary ::= StreamingConcatenation ;
PrimarySequence.      Primary ::= SequenceMethodCall ;
PrimaryThis.          Primary ::= "this" ;
PrimarySuper.         Primary ::= "$" ;
PrimaryNull.          Primary ::= "null" ;

-- Primary literals
PrimLitNumber.        PrimaryLiteral ::= Number ;
PrimLitTime.          PrimaryLiteral ::= TimeLiteral ;
PrimLitUnbased.       PrimaryLiteral ::= UnbasedUnsizedLiteral ;
PrimLitString.        PrimaryLiteral ::= StringLiteral ;

-- Class qualifier
ClassQualifierLocal.  ClassQualifier ::= "local" "::" [ImplicitClassHandle] "." ;
ClassQualifierLocal2. ClassQualifier ::= "local" "::" ClassScope ;
ClassQualifierImplicit. ClassQualifier ::= [ImplicitClassHandle] "." ;
ClassQualifierClass.  ClassQualifier ::= ClassScope ;

-- Range expression  
RangeExprSimple.      RangeExpression ::= Expression ;
RangeExprPart.        RangeExpression ::= PartSelectRange ;

-- A.8.5 Expression left-side values
NetLvalueId.          NetLvalue ::= PsOrHierarchicalNetIdentifier ConstantSelect ;
NetLvalueConcatenation. NetLvalue ::= "{" [NetLvalue] "}" ;
NetLvaluePattern.     NetLvalue ::= [AssignmentPatternExpressionType] AssignmentPatternNetLvalue ;

VariableLvalueId.     VariableLvalue ::= [ImplicitClassHandle] "." [PackageScope] HierarchicalVariableIdentifier Select ;
VariableLvalueId2.    VariableLvalue ::= [PackageScope] HierarchicalVariableIdentifier Select ;
VariableLvalueConcatenation. VariableLvalue ::= "{" [VariableLvalue] "}" ;
VariableLvaluePattern. VariableLvalue ::= [AssignmentPatternExpressionType] AssignmentPatternVariableLvalue ;
VariableLvalueStreaming. VariableLvalue ::= StreamingConcatenation ;

NonrangeVariableLvalueId. NonrangeVariableLvalue ::= [ImplicitClassHandle] "." [PackageScope] HierarchicalVariableIdentifier NonrangeSelect ;
NonrangeVariableLvalueId2. NonrangeVariableLvalue ::= [PackageScope] HierarchicalVariableIdentifier NonrangeSelect ;

-- A.8.6 Operators
UnaryOpPlus.          UnaryOperator ::= "+" ;
UnaryOpMinus.         UnaryOperator ::= "-" ;
UnaryOpNot.           UnaryOperator ::= "!" ;
UnaryOpBitNot.        UnaryOperator ::= "~" ;
UnaryOpAnd.           UnaryOperator ::= "&" ;
UnaryOpNand.          UnaryOperator ::= "~&" ;
UnaryOpOr.            UnaryOperator ::= "|" ;
UnaryOpNor.           UnaryOperator ::= "~|" ;
UnaryOpXor.           UnaryOperator ::= "^" ;
UnaryOpXnor.          UnaryOperator ::= "~^" ;
UnaryOpXnor2.         UnaryOperator ::= "^~" ;

BinaryOpPlus.         BinaryOperator ::= "+" ;
BinaryOpMinus.        BinaryOperator ::= "-" ;
BinaryOpMult.         BinaryOperator ::= "*" ;
BinaryOpDiv.          BinaryOperator ::= "/" ;
BinaryOpMod.          BinaryOperator ::= "%" ;
BinaryOpEqual.        BinaryOperator ::= "==" ;
BinaryOpNotEqual.     BinaryOperator ::= "!=" ;
BinaryOpCaseEqual.    BinaryOperator ::= "===" ;
BinaryOpCaseNotEqual. BinaryOperator ::= "!==" ;
BinaryOpWildEqual.    BinaryOperator ::= "==?" ;
BinaryOpWildNotEqual. BinaryOperator ::= "!=?" ;
BinaryOpLogicalAnd.   BinaryOperator ::= "&&" ;
BinaryOpLogicalOr.    BinaryOperator ::= "||" ;
BinaryOpPower.        BinaryOperator ::= "**" ;
BinaryOpLess.         BinaryOperator ::= "<" ;
BinaryOpLessEq.       BinaryOperator ::= "<=" ;
BinaryOpGreater.      BinaryOperator ::= ">" ;
BinaryOpGreaterEq.    BinaryOperator ::= ">=" ;
BinaryOpAnd.          BinaryOperator ::= "&" ;
BinaryOpOr.           BinaryOperator ::= "|" ;
BinaryOpXor.          BinaryOperator ::= "^" ;
BinaryOpXnor.         BinaryOperator ::= "^~" ;
BinaryOpXnor2.        BinaryOperator ::= "~^" ;
BinaryOpShiftLeft.    BinaryOperator ::= "<<" ;
BinaryOpShiftRight.   BinaryOperator ::= ">>" ;
BinaryOpArithShiftLeft. BinaryOperator ::= "<<<" ;
BinaryOpArithShiftRight. BinaryOperator ::= ">>>" ;
BinaryOpImplies.      BinaryOperator ::= "->" ;
BinaryOpIff.          BinaryOperator ::= "<->" ;

IncOrDecOpInc.        IncOrDecOperator ::= "++" ;
IncOrDecOpDec.        IncOrDecOperator ::= "--" ;

-- Lists
separator Expression "," ;
separator ConstantExpression "," ;
separator StreamExpression "," ;
separator ModulePathExpression "," ;
separator nonempty AttributeInstance "" ;
separator NamedArgument "," ;
separator NetLvalue "," ;
separator VariableLvalue "," ;

-- Coercions for precedence
coercions Expression 13 ;

-- Forward declarations for complex types
TimeLiteralForward.   TimeLiteral ::= Integer TimeUnit ;
TimeUnitS.            TimeUnit ::= "s" ;
TimeUnitMs.           TimeUnit ::= "ms" ;
TimeUnitUs.           TimeUnit ::= "us" ;
TimeUnitNs.           TimeUnit ::= "ns" ;
TimeUnitPs.           TimeUnit ::= "ps" ;
TimeUnitFs.           TimeUnit ::= "fs" ;

StringLiteralForward. StringLiteral ::= String ;
NumberForward.        Number ::= Integer ;
NumberReal.           Number ::= Double ;
UnbasedUnsizedLiteralForward. UnbasedUnsizedLiteral ::= "'" "0" ;
UnbasedUnsizedLiteral1. UnbasedUnsizedLiteral ::= "'" "1" ;
UnbasedUnsizedLiteralX. UnbasedUnsizedLiteral ::= "'" "x" ;
UnbasedUnsizedLiteralZ. UnbasedUnsizedLiteral ::= "'" "z" ;

SimpleTypeForward.    SimpleType ::= IntegerType ;
IntegerTypeVector.    IntegerType ::= IntegerVectorType ;
IntegerTypeAtom.      IntegerType ::= IntegerAtomType ;
IntegerVectorTypeBit. IntegerVectorType ::= "bit" ;
IntegerVectorTypeLogic. IntegerVectorType ::= "logic" ;
IntegerVectorTypeReg. IntegerVectorType ::= "reg" ;
IntegerAtomTypeByte.  IntegerAtomType ::= "byte" ;
IntegerAtomTypeShortint. IntegerAtomType ::= "shortint" ;
IntegerAtomTypeInt.   IntegerAtomType ::= "int" ;
IntegerAtomTypeLongint. IntegerAtomType ::= "longint" ;
IntegerAtomTypeInteger. IntegerAtomType ::= "integer" ;
IntegerAtomTypeTime.  IntegerAtomType ::= "time" ;

-- More forward declarations
DataTypeForward.      DataType ::= IntegerType ;
ClockingEventForward. ClockingEvent ::= Identifier ;
VariableIdentifierListForward. VariableIdentifierList ::= [VariableIdentifier] ;
ConstraintBlockForward. ConstraintBlock ::= "{" "}" ;
ImplicitClassHandleForward. ImplicitClassHandle ::= "this" ;
ImplicitClassHandleSuper. ImplicitClassHandle ::= "super" ;
ImplicitClassHandleThisSuper. ImplicitClassHandle ::= "this" "." "super" ;
PsOrHierarchicalTfIdentifierForward. PsOrHierarchicalTfIdentifier ::= Identifier ;
PsOrHierarchicalNetIdentifierForward. PsOrHierarchicalNetIdentifier ::= Identifier ;
HierarchicalVariableIdentifierForward. HierarchicalVariableIdentifier ::= HierarchicalIdentifier ;
ConstantSelectForward. ConstantSelect ::= [ConstantBitSelect] [ConstantPartSelectRange] ;
ConstantPartSelectRangeForward. ConstantPartSelectRange ::= ConstantRange ;
ConstantRangeForward. ConstantRange ::= ConstantExpression ":" ConstantExpression ;
SelectForward.        Select ::= [BitSelect] [PartSelectRange] ;
BitSelectForward.     BitSelect ::= "[" Expression "]" ;
PartSelectRangeForward. PartSelectRange ::= ConstantRange ;
NonrangeSelectForward. NonrangeSelect ::= [BitSelect] ;
LetExpressionForward. LetExpression ::= Identifier ;
MintypmaxExpressionForward. MintypmaxExpression ::= Expression ;
CastForward.          Cast ::= CastingType "'" "(" Expression ")" ;
CastingTypeForward.   CastingType ::= SimpleType ;
AssignmentPatternExpressionForward. AssignmentPatternExpression ::= "'{" "}" ;
SequenceMethodCallForward. SequenceMethodCall ::= Identifier ;
CondPredicateForward. CondPredicate ::= Expression ;
OpenRangeListForward. OpenRangeList ::= [Expression] ;
OperatorAssignmentForward. OperatorAssignment ::= VariableLvalue AssignmentOperator Expression ;
AssignmentOperatorForward. AssignmentOperator ::= "=" ;
AssignmentPatternExpressionTypeForward. AssignmentPatternExpressionType ::= SimpleType ;
AssignmentPatternNetLvalueForward. AssignmentPatternNetLvalue ::= "'{" [NetLvalue] "}" ;
AssignmentPatternVariableLvalueForward. AssignmentPatternVariableLvalue ::= "'{" [VariableLvalue] "}" ;
ModulePathExpressionForward. ModulePathExpression ::= Identifier ;

separator VariableIdentifier "," ; 