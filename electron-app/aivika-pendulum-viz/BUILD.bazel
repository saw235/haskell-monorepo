load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

package(default_visibility = ["//visibility:public"])

# Source files
filegroup(
    name = "srcs",
    srcs = [
        "main.js",
        "preload.js", 
        "renderer.js",
        "index.html",
        "styles.css",
    ],
)

# Package.json
filegroup(
    name = "package_json",
    srcs = ["package.json"],
)

# Node modules
filegroup(
    name = "node_modules", 
    srcs = glob(["node_modules/**/*"]),
)

# All app files in a single filegroup
filegroup(
    name = "app-files",
    srcs = [
        ":package.json",
        ":main.js",
        ":preload.js",
        ":index.html", 
        ":styles.css",
        ":renderer.js",
        ":node_modules",
    ],
    visibility = ["//visibility:public"],
)

# Executable target to run the Electron app using pnpm dlx
genrule(
    name = "aivika-pendulum-viz-runner",
    srcs = [":app-files"],
    outs = ["run-aivika-pendulum-viz.sh"],
    cmd = """cat > $@ << 'EOF'
#!/bin/bash
# Get the directory where the runfiles are located
SCRIPT_DIR="$$(dirname "$$0")"
RUNFILES_DIR="$${SCRIPT_DIR}/aivika-pendulum-viz.runfiles/_main/electron-app/aivika-pendulum-viz"

# Change to the directory with the electron app files
cd "$${RUNFILES_DIR}"

# Use pnpm dlx to run electron
pnpm dlx electron . $$@
EOF
chmod +x $@
""",
    visibility = ["//visibility:public"],
)

# Create wrapper script that starts both server and visualization app
genrule(
    name = "run-aivika-pendulum-demo",
    outs = ["run-aivika-pendulum-demo.sh"],
    cmd = """cat > $@ << 'EOF'
#!/bin/bash

# Flag to prevent multiple cleanup calls
CLEANUP_DONE=false

# Function to cleanup on exit
cleanup() {
    if [ "$$CLEANUP_DONE" = true ]; then
        return
    fi
    CLEANUP_DONE=true
    
    echo "Cleaning up..."
    if [ ! -z "$$SERVER_PID" ]; then
        echo "Stopping Aivika pendulum server (PID: $$SERVER_PID)..."
        kill $$SERVER_PID 2>/dev/null || true
        wait $$SERVER_PID 2>/dev/null || true
    fi
    if [ ! -z "$$ELECTRON_PID" ]; then
        echo "Stopping Electron app (PID: $$ELECTRON_PID)..."
        kill $$ELECTRON_PID 2>/dev/null || true
        wait $$ELECTRON_PID 2>/dev/null || true
    fi
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM EXIT

echo "Starting Aivika Pendulum Simulation Visualization..."

# Get the directory where the runfiles are located
SCRIPT_DIR="$$(dirname "$$0")"
RUNFILES_DIR="$${SCRIPT_DIR}/aivika-pendulum-demo.runfiles"

# Find the server binary
SERVER_BINARY="$${RUNFILES_DIR}/_main/haskell/app/aivika-pendulum-sim/aivika-pendulum-sim"

if [ ! -f "$$SERVER_BINARY" ]; then
    echo "Error: Aivika pendulum server binary not found at $$SERVER_BINARY"
    echo "Available files in runfiles:"
    find "$${RUNFILES_DIR}" -name "*pendulum*" -type f 2>/dev/null || echo "No pendulum files found"
    exit 1
fi

# Start the Aivika WebSocket server
echo "Starting Aivika Pendulum Simulation server on localhost:9162..."
cd "$$(dirname "$$SERVER_BINARY")"
"$$SERVER_BINARY" --server --port 9162 &
SERVER_PID=$$!
echo "Aivika pendulum server started with PID: $$SERVER_PID"

# Wait a moment for server to start
sleep 2

# Check if server is running
if ! kill -0 $$SERVER_PID 2>/dev/null; then
    echo "Error: Aivika pendulum server failed to start"
    exit 1
fi

echo "Aivika pendulum server is running, you can test it at ws://127.0.0.1:9162"

# Start the Electron app
echo "Starting Electron pendulum visualization app..."
cd "$${RUNFILES_DIR}/_main/electron-app/aivika-pendulum-viz"
pnpm dlx electron . "$$@" &
ELECTRON_PID=$$!
echo "Electron pendulum visualization app started with PID: $$ELECTRON_PID"

# Wait for Electron process to exit and then cleanup
wait $$ELECTRON_PID
echo "Electron app closed, cleaning up..."
cleanup
EOF
chmod +x $@
""",
    visibility = ["//visibility:public"],
)

# Wrapper genrule that passes Haskell binary location
genrule(
    name = "aivika-pendulum-demo-wrapper",
    srcs = [":run-aivika-pendulum-demo"],
    outs = ["run-aivika-pendulum-demo-wrapper.sh"],
    cmd = """cat > $@ << 'EOF'
#!/bin/bash
# Pass the Haskell binary location to the wrapper script
exec "$$(dirname "$$0")/run-aivika-pendulum-demo.sh" "$$@"
EOF
chmod +x $@
""",
    visibility = ["//visibility:public"],
)

# Run target for normal mode
sh_binary(
    name = "aivika-pendulum-viz",
    srcs = [":aivika-pendulum-viz-runner"],
    data = [":app-files"],
    visibility = ["//visibility:public"],
)

# Run target for development mode
sh_binary(
    name = "aivika-pendulum-viz-dev",
    srcs = [":aivika-pendulum-viz-runner"],
    data = [":app-files"],
    args = ["--dev"],
    visibility = ["//visibility:public"],
)

# Main demo target that includes the Haskell backend
sh_binary(
    name = "aivika-pendulum-demo",
    srcs = [":aivika-pendulum-demo-wrapper"],
    data = [
        ":app-files",
        ":run-aivika-pendulum-demo",
        "//haskell/app/aivika-pendulum-sim:aivika-pendulum-sim",
    ],
    visibility = ["//visibility:public"],
)

# Demo target for development mode
sh_binary(
    name = "aivika-pendulum-demo-dev",
    srcs = [":aivika-pendulum-demo-wrapper"],
    data = [
        ":app-files", 
        ":run-aivika-pendulum-demo",
        "//haskell/app/aivika-pendulum-sim:aivika-pendulum-sim",
    ],
    args = ["--dev"],
    visibility = ["//visibility:public"],
)